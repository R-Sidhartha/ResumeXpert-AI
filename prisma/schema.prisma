// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  firstName String?
  lastName  String?
  linkedIn  String?
  github    String?
  email     String   @unique
  onboarded Boolean  @default(false)
  resumes   Resume[]

  referralCode String  @unique @default(uuid())
  referredById String?
  referredBy   User?   @relation("UserReferrals", fields: [referredById], references: [id])
  referrals    User[]  @relation("UserReferrals")

  sentReferrals      Referral[]     @relation("Referrer") // This user referred others
  receivedReferral   Referral[]     @relation("Referee") // This user was referred by someone
  credits            Int?           @default(0)
  subscriptions      Subscription[]
  redemptions        Redemption[]
  subscriptionPlan   String         @default("free")
  subscriptionStatus String?
  subscriptionId     String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@map("user")
}

model Referral {
  id          String   @id @default(cuid())
  referrerId  String
  refereeId   String
  referrer    User     @relation("Referrer", fields: [referrerId], references: [id])
  referee     User     @relation("Referee", fields: [refereeId], references: [id])
  rewardGiven Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@unique([referrerId, refereeId])
}

enum PlanType {
  pro
  elite
}

enum SubscriptionStatus {
  created
  active
  inactive
  pending
  cancelled
  failed
}

model Subscription {
  id                     String             @id @default(cuid())
  userId                 String
  planType               PlanType
  razorpaySubscriptionId String             @unique
  status                 SubscriptionStatus
  currentPeriodEnd       DateTime?
  metadata               Json?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Redemption {
  id          String   @id @default(cuid())
  userId      String
  planType    PlanType
  creditsUsed Int
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Resume {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  title       String?
  description String?

  photoUrl    String?
  colorHex    String  @default("#000000")
  borderStyle String  @default("squircle")
  summary     String?
  firstName   String?
  lastName    String?
  jobTitle    String?
  city        String?
  country     String?
  phone       String?
  email       String?
  linkedIn    String?
  github      String?
  twitter     String?
  portfolio   String?

  pdfUrl      String?
  imgUrl      String?
  pdfPublicId String?

  resumeTemplate   ResumeTemplate? @relation(fields: [resumeTemplateId], references: [id], onDelete: Cascade)
  resumeTemplateId String?

  customization Customization?

  workExperiences           WorkExperience[]
  educations                Education[]
  projects                  Project[]
  positionsOfResponsibility PositionOfResponsibility[]
  skills                    Skill[]
  customSections            CustomSection[]
  certifications            String[]                   @default([])
  achievements              String[]                   @default([])
  extraCurriculars          String[]                   @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resumes")
}

model ResumeTemplate {
  id                String  @id @default(cuid())
  name              String
  description       String?
  thumbnailUrl      String
  template          String
  subscriptionLevel String

  resumes   Resume[] //have to create function to update this when user selects on any resume template
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resume_templates")
}

model Customization {
  id       String @id @default(cuid())
  resumeId String @unique
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  bulletIcon     String?
  margin         String?
  fontSize       String?
  lineSpacing    String?
  sectionSpacing String?
  itemSpacing    String?
  wordSpacing    String?
  color          String?
  sectionOrder   String[] @default([])
  sectionTitles  Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customization")
}

model WorkExperience {
  id          String    @id @default(cuid())
  position    String?
  company     String?
  location    String?
  startDate   DateTime?
  endDate     DateTime?
  description String[]  @default([])

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_experiences")
}

model Education {
  id                     String    @id @default(cuid())
  degree                 String?
  branch                 String?
  score                  String?
  school                 String?
  startDate              DateTime?
  endDate                DateTime?
  isHighestQualification Boolean   @default(false)

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("educations")
}

model Project {
  id          String    @id @default(cuid())
  title       String?
  description String[]  @default([])
  // techStack   String[] // Array of technologies used in the project
  link        String? // Optional link to the project (e.g., GitHub repo or live demo)
  gitLink     String?
  startDate   DateTime?
  endDate     DateTime?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model Skill {
  id     String   @id @default(cuid())
  label  String?
  skills String[] @default([]) // Array of skills under a label

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

model PositionOfResponsibility {
  id           String    @id @default(cuid())
  position     String?
  organization String?
  startDate    DateTime?
  endDate      DateTime?
  description  String[]  @default([])

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("positions_of_responsibility")
}

model CustomSection {
  id    String  @id @default(cuid())
  title String? // e.g. "Volunteering", "Freelance Work"
  order Int? // ordering index within resume

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  entries CustomSectionEntry[] // NEW RELATION

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("custom_sections")
}

model CustomSectionEntry {
  id          String    @id @default(cuid())
  heading     String?
  subheading  String?
  location    String?
  startDate   DateTime?
  endDate     DateTime?
  description String[]  @default([]) // Bullet points

  sectionId String
  section   CustomSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("custom_section_entries")
}
